// Code generated by protoc-gen-go. DO NOT EDIT.
// source: moodle-puppeteer-tg-bot.proto

package moodle_puppeteer_tg_bot

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_60989a372d86c245, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
}

func init() { proto.RegisterFile("moodle-puppeteer-tg-bot.proto", fileDescriptor_60989a372d86c245) }

var fileDescriptor_60989a372d86c245 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcd, 0xcd, 0xcf, 0x4f,
	0xc9, 0x49, 0xd5, 0x2d, 0x28, 0x2d, 0x28, 0x48, 0x2d, 0x49, 0x4d, 0x2d, 0xd2, 0x2d, 0x49, 0xd7,
	0x4d, 0xca, 0x2f, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x62, 0xe7, 0x62, 0x75, 0xcd, 0x2d,
	0x28, 0xa9, 0x34, 0xd2, 0xe4, 0x62, 0x76, 0xca, 0x2f, 0x11, 0x52, 0xe2, 0xe2, 0xcb, 0xcf, 0x0b,
	0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x0e, 0x2d, 0x48, 0x49, 0x2c, 0x49, 0x15, 0x62, 0xd3, 0x03, 0x2b,
	0x90, 0x82, 0xd2, 0x4a, 0x0c, 0x46, 0x9a, 0x5c, 0x6c, 0xe1, 0xf9, 0x45, 0xd9, 0xa9, 0x45, 0x42,
	0xf2, 0x5c, 0xdc, 0x45, 0xa9, 0xc5, 0xa9, 0x25, 0x10, 0x0d, 0x98, 0x4a, 0x93, 0xd8, 0xc0, 0xb6,
	0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x13, 0x94, 0x75, 0x86, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BotClient is the client API for Bot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BotClient interface {
	OnStatusUpdate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type botClient struct {
	cc *grpc.ClientConn
}

func NewBotClient(cc *grpc.ClientConn) BotClient {
	return &botClient{cc}
}

func (c *botClient) OnStatusUpdate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Bot/onStatusUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotServer is the server API for Bot service.
type BotServer interface {
	OnStatusUpdate(context.Context, *Empty) (*Empty, error)
}

func RegisterBotServer(s *grpc.Server, srv BotServer) {
	s.RegisterService(&_Bot_serviceDesc, srv)
}

func _Bot_OnStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).OnStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bot/OnStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).OnStatusUpdate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Bot",
	HandlerType: (*BotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "onStatusUpdate",
			Handler:    _Bot_OnStatusUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moodle-puppeteer-tg-bot.proto",
}

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	ResetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) ResetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/resetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	ResetStatus(context.Context, *Empty) (*Empty, error)
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_ResetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).ResetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/ResetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).ResetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "resetStatus",
			Handler:    _Worker_ResetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moodle-puppeteer-tg-bot.proto",
}
